{
    "docs": [
        {
            "location": "/",
            "text": "FilmFox Documentation\n\n\nFilmFox is a Java application made primarily to learn from. The caveats of software development are explored in depth, such\nas reliability, logging, connectivity, design patterns, etc.\n\n\nLogical Architecture",
            "title": "Home"
        },
        {
            "location": "/#filmfox-documentation",
            "text": "FilmFox is a Java application made primarily to learn from. The caveats of software development are explored in depth, such\nas reliability, logging, connectivity, design patterns, etc.",
            "title": "FilmFox Documentation"
        },
        {
            "location": "/#logical-architecture",
            "text": "",
            "title": "Logical Architecture"
        },
        {
            "location": "/getting-started/",
            "text": "Deploying FilmFox\n\n\nThis section will get you up and running with deploying the FilmFox\napplication on your local machine. One of the main focuses of FilmFox is to create a simple and down-to-the-point deployment\nroutine. It shouldn't take hours and hours of playing around with config files,\ndependency servers, incompatibilities, etc. to get you to a running state. So let's do this as quick as possible. Read on!\n\n\n\n\nRunning Dependencies with Vagrant\n\n\nFirst thing you'll need is Vagrant (and VirtualBox). Vagrant helps us setup a portable environment so that we can\nset up all the dependency servers we require using a simple script located in the root directory\nof the repository, called 'Vagrantfile'. For more information about Vagrant, please visit \nVagrant\n.\n\n\nFilmFox was developed using VirtualBox as the underlying Vagrant provider, although you can use VMWare as well, however that has not been formally\ntested (just yet!)\n\n\nTested under:\n\n\n\n\nVirtualBox - Version 5.0.6 r103037\n\nVagrant - Version 1.8.1\n\n\n\n\nStep-by-step\n\n\n\n\nDownload and install VirtualBox v5.0.6 or later @ \nVirtualBox Downloads\n\n\nDownload and install Vagrant @ \nVagrant Downloads\n\n\nNavigate to the root directory of the FilmFox repository and run the following command in Terminal or Command Line:\n\n\n\n\n> vagrant up\n\n\n\n\n\n\nAfter vagrant has finished downloading/provisioning the servers needed for the application to run, you can proceed to the next section.\n\n\n\n\n\n\nRunning the application\n\n\nRunning the application once Vagrant is up and running is simple. Here's how to do it:\n\n\n\n\nIf you're running the application for the first time, you should load in some sample data into the environment.\nTo do this, we grab the CQL script from src/main/resources named BaseCassandraData.cql and execute the full\ncontent on a Cassandra CQL command line (using cqlsh tool). To get the full configuration for Cassandra, observe src/main/resources/application.properties file.\n(Automation of execution of this script will be coming in future release.)\n\n\n\n\nStep-by-step\n\n\n\n\nIn the Terminal or Command Line, to start up the app, just run:\n\n\n\n\nOn Linux or OSX\n\n\n> ./activator run\n\n\n\n\nOn Windows\n\n\n> activator.bat run\n\n\n\n\n\n\nNavigate to your browser and open \nhttp://localhost:8080\n\n\n\n\nThat's all there is to it. My aim is to make it stay this way, as simple and clean as possible.\n\n\nCustomizing your build\n\n\nSetting a custom port\n\n\nFilmFox app lets you choose which port to bind the application on. By including a simple command line flag, you can\nperform this operation:\n\n\nOn Linux or OSX\n\n\n> ./activator -Dserver.port=9000 run\n\n\n\n\nOn Windows\n\n\n> activator.bat -Dserver.port=9000 run\n\n\n\n\nIn this example we set the port to be 9000, but you are free to set a port of your own choosing (make sure to pick\nan open port and above the 1024 range for fear of potential collisions).",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#deploying-filmfox",
            "text": "This section will get you up and running with deploying the FilmFox\napplication on your local machine. One of the main focuses of FilmFox is to create a simple and down-to-the-point deployment\nroutine. It shouldn't take hours and hours of playing around with config files,\ndependency servers, incompatibilities, etc. to get you to a running state. So let's do this as quick as possible. Read on!   Running Dependencies with Vagrant  First thing you'll need is Vagrant (and VirtualBox). Vagrant helps us setup a portable environment so that we can\nset up all the dependency servers we require using a simple script located in the root directory\nof the repository, called 'Vagrantfile'. For more information about Vagrant, please visit  Vagrant .  FilmFox was developed using VirtualBox as the underlying Vagrant provider, although you can use VMWare as well, however that has not been formally\ntested (just yet!)  Tested under:   VirtualBox - Version 5.0.6 r103037 Vagrant - Version 1.8.1   Step-by-step   Download and install VirtualBox v5.0.6 or later @  VirtualBox Downloads  Download and install Vagrant @  Vagrant Downloads  Navigate to the root directory of the FilmFox repository and run the following command in Terminal or Command Line:   > vagrant up   After vagrant has finished downloading/provisioning the servers needed for the application to run, you can proceed to the next section.    Running the application  Running the application once Vagrant is up and running is simple. Here's how to do it:   If you're running the application for the first time, you should load in some sample data into the environment.\nTo do this, we grab the CQL script from src/main/resources named BaseCassandraData.cql and execute the full\ncontent on a Cassandra CQL command line (using cqlsh tool). To get the full configuration for Cassandra, observe src/main/resources/application.properties file.\n(Automation of execution of this script will be coming in future release.)   Step-by-step   In the Terminal or Command Line, to start up the app, just run:   On Linux or OSX  > ./activator run  On Windows  > activator.bat run   Navigate to your browser and open  http://localhost:8080   That's all there is to it. My aim is to make it stay this way, as simple and clean as possible.  Customizing your build  Setting a custom port  FilmFox app lets you choose which port to bind the application on. By including a simple command line flag, you can\nperform this operation:  On Linux or OSX  > ./activator -Dserver.port=9000 run  On Windows  > activator.bat -Dserver.port=9000 run  In this example we set the port to be 9000, but you are free to set a port of your own choosing (make sure to pick\nan open port and above the 1024 range for fear of potential collisions).",
            "title": "Deploying FilmFox"
        },
        {
            "location": "/tech-stack/",
            "text": "Tech Stack",
            "title": "Tech Stack"
        },
        {
            "location": "/tech-stack/#tech-stack",
            "text": "",
            "title": "Tech Stack"
        }
    ]
}